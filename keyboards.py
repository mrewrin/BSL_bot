import logging

from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
from collections import defaultdict


from keyboa import Keyboa


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
class Pagination(CallbackData, prefix="pag"):
    action: str
    page: int


# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
    button_service_list = KeyboardButton(text="üíº –ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –Ω–∞–∫—Ä—É—Ç–∫–∏")
    button_support_chat = KeyboardButton(text="üßë‚Äçüíª –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
    button_my_profile = KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    button_my_orders = KeyboardButton(text="üìë –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    button_balance_recharge = KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [button_service_list, button_support_chat],
            [button_my_profile, button_my_orders],
            [button_balance_recharge]
        ],
        resize_keyboard=True
    )
    return menu_keyboard


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã 1 —É—Ä–æ–≤–Ω—è - —Å–µ—Ä–≤–∏—Å—ã –Ω–∞–∫—Ä—É—Ç–∫–∏
def create_service_list_keyboard(service_list_data):
    try:
        # print("–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
        keyboard_list = []
        social_networks = set()
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
        for service_data in service_list_data:
            category = service_data.get('category')
            social_network = category.split('-')[0].strip().capitalize()
            # –ò—Å–∫–ª—é—á–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ—Ü—Å–µ—Ç–µ–π —Å —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω
            if ord(social_network[0]) >= 127397:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å–∏–º–≤–æ–ª–æ–º —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
                social_network = social_network[2:].strip().capitalize()  # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
            social_networks.add(social_network)
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        sorted_networks = sorted(social_networks)
        max_buttons_per_chunk = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ –∫–∞–∂–¥–æ–º —á–∞–Ω–∫–µ
        chunks = [sorted_networks[i:i + max_buttons_per_chunk] for i in
                  range(0, len(sorted_networks), max_buttons_per_chunk)]
        # print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {len(chunks)}")
        for i, chunk in enumerate(chunks):
            keyboard_buttons = []
            for network in chunk:
                button = InlineKeyboardButton(text=network, callback_data=f"network_{network.lower()}_firstkb")
                keyboard_buttons.append(button)
            keyboard_markup = InlineKeyboardBuilder()
            keyboard_markup.add(*keyboard_buttons)
            keyboard_markup.adjust(3)
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            pagination = paginator(page=i)  # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            keyboard_markup.attach(pagination)
            # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ø–∏—Å–æ–∫
            keyboard_list.append(keyboard_markup)
        return keyboard_list
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        return None


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã 2 —É—Ä–æ–≤–Ω—è - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞–∫—Ä—É—Ç–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
def create_social_network_keyboards(service_list_data, received_callback):
    print('create_social_network_keyboards called')
    social_network_set = set()
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
    for service_data in service_list_data:
        category = service_data.get('category')
        social_network = category.split('-')[0].strip().capitalize()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã
        if ord(social_network[0]) >= 127397:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å–∏–º–≤–æ–ª–æ–º —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
            social_network_set.add(social_network)
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å key - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–∏, values - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
    social_network_with_flags = list(social_network_set)
    social_network_dict = {}
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É social_network_with_flags
    for network_with_flag in social_network_with_flags:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
        social_network = network_with_flag.split()[1]
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
        if social_network not in social_network_dict:
            social_network_dict[social_network] = [network_with_flag]
        else:
            social_network_dict[social_network].append(network_with_flag)
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
    second_level_keyboards = {}
    for social_network, values in social_network_dict.items():
        keyboard_items = []
        for value in values:
            # country_flag = value.split()[0]  # –ü–æ–ª—É—á–∞–µ–º —Å–∏–º–≤–æ–ª —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
            callback_data = f"&network={value}&{received_callback}"
            # print(callback_data)
            keyboard_items.append({
                'text': value,  # –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
                'callback_data': callback_data
            })
        second_level_keyboards[social_network.lower()] = Keyboa(items=keyboard_items, front_marker="&secondkb=",
                                                                back_marker="$")
    return second_level_keyboards


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã 3 —É—Ä–æ–≤–Ω—è - —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
def create_third_level_keyboards(service_list_data):
    print('create_third_level_keyboards called')
    try:
        third_level_keyboards = {}

        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏

        social_network_categories = set()
        for service_data in service_list_data:
            category = service_data.get('category')
            social_network_categories.add(category)
        social_network_categories = sorted(social_network_categories)
        # print(social_network_categories)
        buttons_dict = defaultdict(list)
        for elements in social_network_categories:
            parts = elements.split(" - ")
            if len(parts) > 1:
                network_name = parts[0].strip().capitalize()
                network_category = parts[1].strip().capitalize()
                buttons_dict[network_name].append(network_category)
            else:
                network_name = parts[0]
                network_category = '–£—Å–ª—É–≥–∏'
                buttons_dict[network_name].append(network_category)
        # print(buttons_dict)

        for social_network, categories in buttons_dict.items():
            keyboard_items = []
            for category in categories:
                callback_data = f"&nw={social_network.lower()}&cat={category.lower().strip()}"
                keyboard_items.append({
                    'text': category,
                    'callback_data': callback_data
                })
            third_level_keyboards[social_network.lower()] = Keyboa(items=keyboard_items,
                                                                   front_marker="&thirdkb=", back_marker="$")
        return third_level_keyboards
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è: {e}")
        return {}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã 4 —É—Ä–æ–≤–Ω—è - –ø–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥
async def create_fourth_level_keyboard(service_list_data, current_page=0):
    print("create_fourth_level_keyboard called")
    print("Current page:", current_page)

    max_item_per_page = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = current_page * max_item_per_page
    end_index = start_index + max_item_per_page
    services_on_page = service_list_data[start_index:end_index]

    print("Services on page:", services_on_page)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–∞—Ö
    messages_and_keyboards = {}
    for service in services_on_page:
        print("Processing service:", service)
        category = service.get('category')
        if category not in messages_and_keyboards:
            messages_and_keyboards[category] = ("", InlineKeyboardBuilder())

        message_text = f"üî• {service['name']} ‚ù§Ô∏è\n"
        message_text += f"üÜî ID —É—Å–ª—É–≥–∏: {service['service']}\n"
        message_text += f"‚¨áÔ∏è –ú–∏–Ω–∏–º—É–º –¥–ª—è –∑–∞–∫–∞–∑–∞: {service['min']}\n"
        message_text += f"‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –∑–∞–∫–∞–∑–∞: {service['max']}\n"
        message_text += f"üí∏ –¶–µ–Ω–∞ –∑–∞ 1–∫: {service['rate']}‚ÇΩ\n"
        message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {service['name']}\n"

        messages_and_keyboards[category][0] += message_text + "\n\n"

    print("Messages and keyboards:", messages_and_keyboards)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è Previous", callback_data=Pagination.new(action="prev", page=current_page))
        )
    if end_index < len(service_list_data):
        pagination_buttons.append(
            InlineKeyboardButton(text="Next ‚û°Ô∏è", callback_data=Pagination.new(action="next", page=current_page))
        )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    back_button = InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="&button=prev")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardBuilder()
    keyboard.add(back_button)
    keyboard.row(*pagination_buttons)
    keyboard.adjust(3)

    for _, data in messages_and_keyboards.items():
        data[1] = keyboard

    return messages_and_keyboards


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

# –ü–∞–≥–∏–Ω–∞—Ç–æ—Ä
def paginator(page: int = 0):
    pagination_keyboard = InlineKeyboardBuilder()
    pagination_keyboard.add(
        InlineKeyboardButton(text="‚¨Ö Previous", callback_data=Pagination(action="prev", page=page).pack()),
        InlineKeyboardButton(text="Next ‚û°", callback_data=Pagination(action="next", page=page).pack())
    )
    return pagination_keyboard