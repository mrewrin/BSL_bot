import logging

from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command


from ..db import add_user, get_user_info
from ..config_reader import config
from ..api_client import get_service_list
from .. import text, keyboards
from ..keyboards import create_service_list_keyboard, Pagination


router = Router()


@router.message(Command("start"))
async def start_handler(message: Message):
    """
    Handle the /start command.
    """
    print("Handler start_handler called")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    username = message.from_user.username
    telegram_id = message.from_user.id
    add_user(username, telegram_id)
    await message.answer(text.greet.format(name=message.from_user.full_name),
                         reply_markup=keyboards.create_main_menu_keyboard())


@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_button_handler(message: Message):
    """
    Handle profile button press.
    """
    print("Handler profile_button_handler called")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        user_id = message.from_user.id
        user_info = get_user_info(user_id)

        if user_info:
            await message.answer(format_user_info(user_info))
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


def format_user_info(user_info):
    """
    Format user information.
    """
    return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n" \
           f"üë§ Username: {user_info[2]}\n" \
           f"ü§ñ Telegram ID: {user_info[1]}\n" \
           f"üíº –°–¥–µ–ª–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {user_info[3]}\n" \
           f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {user_info[4]}\n" \
           f"ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_info[5]}"


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
network_keyboards = {}


@router.message(F.text == "üíº –ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –Ω–∞–∫—Ä—É—Ç–∫–∏")
async def service_list_handler(message: types.Message):
    """
    Handle the service list button press.
    """
    print("Handler service_list_handler called")

    try:
        if message.text == "üíº –ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –Ω–∞–∫—Ä—É—Ç–∫–∏":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ—á–Ω—è —É—Å–ª—É–≥
            api_key = config.api_key.get_secret_value()
            service_list_data = await get_service_list(api_key)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
            if service_list_data:
                keyboard_list = create_service_list_keyboard(service_list_data)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
                if keyboard_list:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    network_keyboards[message.chat.id] = keyboard_list[:]

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=keyboard_list[0].as_markup())
                    print("First keyboard sent successfully")
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
                    print("Failed to create keyboard")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.")
                print("Failed to get service list")

    except Exception as e:
        logging.error(f"Error in handling service list request: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_page_dict = {}


@router.callback_query(Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(callback_query: CallbackQuery, callback_data: Pagination):
    user_id = callback_query.from_user.id
    print(f"Pagination handler called by user ID: {user_id}")

    if user_id in network_keyboards:
        keyboard_list = network_keyboards[user_id]
        if keyboard_list:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
            current_page = current_page_dict.get(user_id, 0)

            if callback_data.action == "prev":
                current_page -= 1
            elif callback_data.action == "next":
                current_page += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            if current_page < 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                print("User is already on the first page")
                await callback_query.answer("You are already on the first page", show_alert=True)
                current_page = 0
            elif current_page >= len(keyboard_list):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                print("User is already on the last page")
                await callback_query.answer("You are already on the last page", show_alert=True)
                current_page = len(keyboard_list) - 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_page_dict[user_id] = current_page

            print(f"Pagination: Action - {callback_data.action}, Current Page - {current_page}")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback_query.message.delete_reply_markup()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback_query.message.edit_reply_markup(reply_markup=keyboard_list[current_page].as_markup())
        else:
            await callback_query.answer("Please send the service list first")
    else:
        await callback_query.answer("Please send the service list first")