import logging

from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from ..db import add_user, get_user_info
from ..config_reader import config
from ..api_client import get_service_list
from .. import text, keyboards
from ..keyboards import Pagination, create_service_list_keyboard, \
    create_social_network_keyboards, create_third_level_keyboards, \
    create_fourth_level_keyboard

keyboard_router = Router()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@keyboard_router.message(Command("start"))
async def start_handler(message: Message):
    """
    Handle the /start command.
    """
    print("Handler start_handler called")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    username = message.from_user.username
    telegram_id = message.from_user.id
    add_user(username, telegram_id)
    await message.answer(text.greet.format(name=message.from_user.full_name),
                         reply_markup=keyboards.create_main_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –õ–ö
@keyboard_router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_button_handler(message: Message):
    """
    Handle profile button press.
    """
    print("Handler profile_button_handler called")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        user_id = message.from_user.id
        user_info = get_user_info(user_id)

        if user_info:
            await message.answer(format_user_info(user_info))
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –õ–ö
def format_user_info(user_info):
    """
    Format user information.
    """
    return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ:\n" \
           f"üë§ Username: {user_info[2]}\n" \
           f"ü§ñ Telegram ID: {user_info[1]}\n" \
           f"üíº –°–¥–µ–ª–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {user_info[3]}\n" \
           f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {user_info[4]}\n" \
           f"ü§ù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_info[5]}"


@keyboard_router.message(F.text == "üßë‚Äçüíª –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π")
async def support_chat(message: Message):
    """
    Chat support button press.
    """
    if message.text == "üßë‚Äçüíª –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π":
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.delete_reply_markup()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º —á–∞—Ç –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –≤ –Ω–∞—à–µ–º —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: "
                             "[BestSmmLike Support](https://t.me/bestsmmlike)")


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ -> –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä 1 —É—Ä–æ–≤–Ω—è
# !!! TO_DO - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è global variables !!!
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
network_keyboards = {}


@keyboard_router.message(F.text == "üíº –ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –Ω–∞–∫—Ä—É—Ç–∫–∏")
async def service_list_handler(message: types.Message, state: FSMContext):
    """
    Handle the service list button press.
    """
    print("Handler service_list_handler called")

    try:
        if message.text == "üíº –ü–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ –Ω–∞–∫—Ä—É—Ç–∫–∏":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ—á–Ω—è —É—Å–ª—É–≥
            api_key = config.api_key.get_secret_value()
            service_list_data = await get_service_list(api_key)
            # –ó–∞–ø–∏—Å—å service_list_data –≤ state_data
            await state.update_data(service_list_data=service_list_data)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
            if service_list_data:
                keyboard_list = create_service_list_keyboard(service_list_data)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
                if keyboard_list:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    network_keyboards[message.chat.id] = keyboard_list[:]

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=keyboard_list[0].as_markup())
                    # print("First keyboard sent successfully")
                else:
                    await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
                    print("Failed to create keyboard")
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.")
                print("Failed to get service list")

    except Exception as e:
        logging.error(f"Error in handling service list request: {e}")
        print(f"Error in handling service list request: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
previous_keyboard_dict = {}
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_page_dict = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö 1 —É—Ä–æ–≤–Ω—è
@keyboard_router.callback_query(Pagination.filter(F.action.in_(["prev", "next"])))
async def pagination_handler(callback_query: CallbackQuery, callback_data: Pagination):
    user_id = callback_query.from_user.id
    print(f"Pagination handler called by user ID: {user_id}")

    if user_id in network_keyboards:
        keyboard_list = network_keyboards[user_id]
        if keyboard_list:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
            current_page = current_page_dict.get(user_id, 0)

            if callback_data.action == "prev":
                current_page -= 1
            elif callback_data.action == "next":
                current_page += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            if current_page < 0:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                print("User is already on the first page")
                await callback_query.answer("You are already on the first page", show_alert=True)
                current_page = 0
            elif current_page >= len(keyboard_list):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                print("User is already on the last page")
                await callback_query.answer("You are already on the last page", show_alert=True)
                current_page = len(keyboard_list) - 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_page_dict[user_id] = current_page

            print(f"Pagination: Action - {callback_data.action}, Current Page - {current_page}")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback_query.message.delete_reply_markup()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback_query.message.edit_reply_markup(reply_markup=keyboard_list[current_page].as_markup())
            await callback_query.message.delete_reply_markup()
        else:
            await callback_query.answer("Please send the service list first")
    else:
        await callback_query.answer("Please send the service list first")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö 2 —É—Ä–æ–≤–Ω—è
@keyboard_router.callback_query(F.data.in_("&button=prev"))
async def handle_back_button(callback_query: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback_query.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Å–µ—Ç–µ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        if user_id in network_keyboards:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
            current_page = current_page_dict.get(user_id, 0)

            # –£–º–µ–Ω—å—à–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ 1 (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥)
            current_page -= 1

            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if current_page < 0:
                current_page = 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_page_dict[user_id] = current_page

            # –í—ã–∑—ã–≤–∞–µ–º pagination_handler –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await pagination_handler(callback_query, Pagination(action="prev", page=current_page))

        else:
            await callback_query.answer("Please send the service list first")

    except Exception as e:
        print("An error occurred while handling back button:", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ 2 —É—Ä–æ–≤–Ω—è -> –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä 3 —É—Ä–æ–≤–Ω—è
@keyboard_router.callback_query(F.text.startswith("&secondkb"))
async def handle_second_level_to_third_countries(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()

        service_list_data = state_data.get("service_list_data")
        # received_callback = state_data.get("received_callback")

        if service_list_data is None:
            print("Service list data is not available in state.")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–∏ –∏–∑ callback_data
        parts = callback_query.data.split("&")
        network = None
        for part in parts:
            if part.startswith("network="):
                network = part.split("=")[1]
                break

        if network:
            # print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –∫–æ–ª–ª–±—ç–∫–æ–º:", callback_query.data)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏ –∏ —Å—Ç—Ä–∞–Ω—ã
            third_level_keyboard = create_third_level_keyboards(service_list_data)
            if third_level_keyboard:
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏
                keyboard = third_level_keyboard.get(network.lower())
                if keyboard:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Keyboa –≤ –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
                    inline_keyboard = []
                    row = []
                    for item in keyboard.items:
                        kb_text = item['text']
                        callback_data = '&tk' + item['callback_data']
                        # print("2>3 Countries", callback_data)
                        button = InlineKeyboardButton(text=kb_text, callback_data=callback_data)
                        row.append(button)
                        if len(row) == 3 or item == keyboard.items[-1]:
                            inline_keyboard.append(row)
                            row = []

                    # Add back button
                    back_button = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="&button=prev")
                    inline_keyboard.append([back_button])

                    inline_keyboard_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    await state.update_data(previous_keyboard=callback_query.message.reply_markup)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è
                    await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard_markup)
                else:
                    print(f"Third level keyboard for {network} not found.")
            else:
                print(f"No keyboards found for {network}.")
        else:
            print("Countries Network not found in callback data.")

    except Exception as e:
        print("2->3 lvl Countries An error occurred while handling callback query:", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –†–∞–∑–Ω–æ–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ 2 —É—Ä–æ–≤–Ω—è -> –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä 3 —É—Ä–æ–≤–Ω—è
@keyboard_router.callback_query(F.text.startswith("others"))
async def handle_second_level_to_third_others(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()

        service_list_data = state_data.get("service_list_data")
        # received_callback = state_data.get("received_callback")

        if service_list_data is None:
            print("Service list data is not available in state.")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–∏ –∏–∑ callback_data
        parts = callback_query.data.split(" ")
        if len(parts) >= 2:
            network = parts[1]
            # print(network)
        else:
            print("Network name not found in callback data.")
            return

        # print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –∫–æ–ª–ª–±—ç–∫–æ–º:", callback_query.data)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏ –∏ —Å—Ç—Ä–∞–Ω—ã
        third_level_keyboard = create_third_level_keyboards(service_list_data)

        if third_level_keyboard:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏
            keyboard = third_level_keyboard.get(network.lower())
            if keyboard:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç Keyboa –≤ –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
                inline_keyboard = []
                row = []
                for item in keyboard.items:
                    kb_text = item['text']
                    kb_text = kb_text[:20]
                    # print(kb_text)
                    callback_data = '&tk' + item['callback_data']
                    # print("2>3 others", callback_data)
                    button = InlineKeyboardButton(text=kb_text, callback_data=callback_data[:20])
                    # print(button)
                    row.append(button)
                    if len(row) == 3 or item == keyboard.items[-1]:
                        inline_keyboard.append(row)
                        row = []

                # Add back button
                back_button = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="&button=prev")
                inline_keyboard.append([back_button])

                inline_keyboard_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
                # print(inline_keyboard_markup)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(previous_keyboard=callback_query.message.reply_markup)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è
                await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard_markup)
            else:
                print(f"Third level keyboard for {network} not found.")
        else:
            print(f"No keyboards found for {network}.")

    except Exception as e:
        print("2->3 Others lvl An error occurred while handling callback query:", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ 1 —É—Ä–æ–≤–Ω—è -> –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä 3 —É—Ä–æ–≤–Ω—è
@keyboard_router.callback_query(F.text.startswith("network"))
async def handle_first_level_to_third(callback_query: types.CallbackQuery, state: FSMContext):
    print('handle_first_level_to_third called')
    try:
        state_data = await state.get_data()

        service_list_data = state_data.get("service_list_data")
        # received_callback = state_data.get("received_callback")

        # print("received_callback:", received_callback)

        if service_list_data is None:
            print("Service list data is not available in state.")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—Å—Ç–µ –∫–æ–ª–ª–±—ç–∫–∞
        # print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –∫–æ–ª–ª–±—ç–∫–æ–º:", callback_query.data)

        network = callback_query.data.split("_")[1].lower()
        # print("Network:", network)

        third_level_keyboards = create_third_level_keyboards(service_list_data)
        if third_level_keyboards:
            third_level_keyboard = third_level_keyboards.get(network)
            if third_level_keyboard:
                await state.update_data(previous_keyboard=callback_query.message.reply_markup)
                keyboard_items = third_level_keyboard.items

                inline_keyboard = []
                for i in range(0, len(keyboard_items), 3):
                    row = []
                    for j in range(i, min(i + 3, len(keyboard_items))):
                        item = keyboard_items[j]
                        kb_text = item['text']
                        kb_text = kb_text[:20]
                        # print(kb_text)
                        callback_data = f"&tk&{item['callback_data'].split('=')[-1]}"
                        # print("1>3", callback_data)
                        button = InlineKeyboardButton(text=kb_text, callback_data=callback_data[:20])
                        row.append(button)
                        # print(button)
                    inline_keyboard.append(row)
                # print(inline_keyboard)
                back_button = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="&button=prev")
                inline_keyboard.append([back_button])

                inline_keyboard_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

                await callback_query.message.delete_reply_markup()
                await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard_markup)
            else:
                print(f"Third level keyboard for {network} not found.")
        else:
            print(f"No keyboards found for {network}.")
    except Exception as e:
        print("1->3 lvl An error occurred while handling callback query:", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö 3 —É—Ä–æ–≤–Ω—è -> –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä 4 —É—Ä–æ–≤–Ω—è
@keyboard_router.callback_query(F.text.startswith("&tk"))
async def handle_third_level_keyboard(callback_query: types.CallbackQuery, state: FSMContext):
    print("called handle_third_level_keyboard")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category = callback_query.data.split("&")[2]  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        category = category.replace('%20', ' ')  # –ó–∞–º–µ–Ω—è–µ–º %20 –Ω–∞ –ø—Ä–æ–±–µ–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        category = category.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        print("Category:", category)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        state_data = await state.get_data()
        service_list_data = state_data.get("service_list_data")

        if service_list_data:
            print("Creating keyboard and messages")
            messages_and_keyboards = await create_fourth_level_keyboard(service_list_data)
            print("Messages and keyboards:", messages_and_keyboards)

            if category in messages_and_keyboards:
                message_text, keyboard = messages_and_keyboards[category]
            else:
                message_text = "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."
                keyboard = None
        else:
            message_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥."
            keyboard = None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è
        await callback_query.message.edit_text(message_text, reply_markup=keyboard)

    except Exception as e:
        print("An error occurred while handling callback query for third level keyboard:", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ 1 —É—Ä–æ–≤–Ω—è -> –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä 2 —É—Ä–æ–≤–Ω—è
@keyboard_router.callback_query()
async def handle_first_level_keyboard(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()

        service_list_data = state_data.get("service_list_data")
        received_callback = state_data.get("received_callback")

        if service_list_data is None:
            # –ï—Å–ª–∏ service_list_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
            print("Service list data is not available in state.")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü–æ–ª—É—á–∞–µ–º callback_data
        callback_data = callback_query.data
        print(callback_data)
        if callback_data.startswith("&tk"):
            await handle_third_level_keyboard(callback_query, state)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ callback_data —Å –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if callback_data.startswith("network_"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ü—Å–µ—Ç–∏ –∏–∑ callback_data
            network = callback_data.split("_")[1].lower()

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
            second_level_keyboards = create_social_network_keyboards(service_list_data, received_callback)

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏
            second_level_keyboard = second_level_keyboards.get(network)
            if second_level_keyboard:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(previous_keyboard=callback_query.message.reply_markup)
                keyboard_items = second_level_keyboard.items  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ Keyboa

                inline_keyboard = []  # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä—è–¥–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞–∑–Ω–æ–µ" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
                others_button_cb = "others " + network
                back_button = InlineKeyboardButton(text="–†–∞–∑–Ω–æ–µ", callback_data=others_button_cb)
                # print(back_button)
                inline_keyboard.append([back_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º

                # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –∫–Ω–æ–ø–æ–∫ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö –Ω–∞ —Ä—è–¥—ã
                for i in range(0, len(keyboard_items), 3):
                    row = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ä—è–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    for j in range(i, min(i + 3, len(keyboard_items))):
                        item = keyboard_items[j]
                        kb_text = item['text']
                        callback_data = item['callback_data']
                        button = InlineKeyboardButton(text=kb_text, callback_data=callback_data)
                        row.append(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥
                    inline_keyboard.append(row)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨Ö –ù–∞–∑–∞–¥" –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
                back_button = InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="&button=prev")
                inline_keyboard.append([back_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º

                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup
                inline_keyboard_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

                # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                await callback_query.message.delete_reply_markup()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await callback_query.message.edit_reply_markup(reply_markup=inline_keyboard_markup)
            else:
                print(f"Second level keyboard for {network} not found.")
                await handle_first_level_to_third(callback_query, state)
        else:
            # print("Callback data does not have the expected format.")
            if callback_data.startswith("&network"):
                await handle_second_level_to_third_countries(callback_query, state)
            elif callback_data.startswith("others"):
                await handle_second_level_to_third_others(callback_query, state)

    except Exception as e:
        print("1->2 lvl An error occurred while handling callback query:", e)
